---
version: 2.1

executors:
  python:
    parameters:
      tag:
        type: string
        default: '3.8'
    working_directory: ~/build
    docker:
      - image: python:<< parameters.tag >>

commands:
  setup:
    description: Setup environment
    parameters:
      is_alpine:
        type: boolean
        default: false
    steps:
      - when:
          condition: << parameters.is_alpine >>
          steps:
            - run:
                name: Install Alpine Linux build dependencies
                command: apk add --no-cache ca-certificates curl gcc git make musl-dev openssh-client libffi-dev
      - run:
          name: Install Poetry
          command: |
            export POETRY_VERSION=1.0.5
            export POETRY_HOME=$HOME/.local/share/poetry
            export PATH=$HOME/.local/share/poetry/bin:$PATH
            mkdir -p $POETRY_HOME
            curl -sSL https://raw.githubusercontent.com/python-poetry/poetry/master/get-poetry.py | python
            poetry --version
      - checkout
      - when:
          condition: << parameters.is_alpine >>
          steps:
            - run:
                name: Save Alpine Linux version
                command: |
                  echo "alpine: $(cat /etc/alpine-release)" >> .versions
      - run:
          name: Save Python and Poetry versions
          command: |
            export PATH=$HOME/.local/share/poetry/bin:$PATH
            echo "python: ${PYTHON_VERSION}" >> .versions
            echo "poetry: $(poetry --version)" >> .versions
            cat .versions
  install:
    description: Install dependencies
    parameters:
      save_cache:
        type: boolean
        default: true
    steps:
      - restore_cache:
          key: poetry-cache-{{ arch }}-{{ checksum ".versions" }}-
      - run:
          name: Install dependencies
          command: |
            export PATH=$HOME/.local/share/poetry/bin:$PATH
            poetry install
      - when:
          condition: << parameters.save_cache >>
          steps:
            - save_cache:
                key: poetry-cache-{{ arch }}-{{ checksum ".versions" }}-{{ epoch }}
                paths:
                  - ~/.cache/pip
                  - ~/.cache/pypoetry
jobs:
  test:
    description: Test Python package
    parameters:
      tag:
        type: string
        default: '3.8'
      is_alpine:
        type: boolean
        default: false
      upload_coverage:
        type: boolean
        default: false
    executor:
      name: python
      tag: << parameters.tag >>
    steps:
      - setup:
          is_alpine: << parameters.is_alpine >>
      - install
      - run:
          name: Test package
          command: |
            export PATH=$HOME/.local/share/poetry/bin:$PATH
            make test
      - run:
          name: Build package
          command: |
            export PATH=$HOME/.local/share/poetry/bin:$PATH
            make build
      - when:
          condition: << parameters.upload_coverage >>
          steps:
            - run:
                name: Upload coverage to Codecov
                command: |
                  export PATH=$HOME/.local/share/poetry/bin:$PATH
                  if [[ -n "${CODECOV_TOKEN}" ]]; then
                    poetry add --dev codecov
                    poetry run codecov
                  fi
  publish:
    description: Publish Python package
    executor:
      name: python
      tag: '3.8'
    steps:
      - setup
      - install
      - run:
          name: Build package
          command: |
            export PATH=$HOME/.local/share/poetry/bin:$PATH
            make build
      - deploy:
          name: Publish package
          command: |
            export PATH=$HOME/.local/share/poetry/bin:$PATH
            make publish

references:
  version_tags: &version_tags
    tags:
      only: /^v.*/
  filters: &filters
    filters:
      <<: *version_tags

workflows:
  default:
    jobs:
      - test:
          name: test
          upload_coverage: true
          <<: *filters
      - test:
          name: test-alpine
          tag: '3.8-alpine'
          is_alpine: true
          <<: *filters
      - publish:
          filters:
            branches:
              ignore: /.*/
            <<: *version_tags
          requires:
            - test
            - test-alpine
